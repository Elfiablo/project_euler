/*
 * Problem008.h
 *
 * <<<Insert short description here>>>
 * 	
 * Author: Stanimir Stoykov
 * $Id: $
 *	
 * Copyright (c) 2004-2012 EGT Ltd.
 * All rights reserved
	
 * More information at: http://www.egt-bg.com
 */

#ifndef PROBLEM008_H_
#define PROBLEM008_H_

#include <iostream>
/*
 * Find the greatest product of five consecutive digits in the 1000-digit number.

	73167176531330624919225119674426574742355349194934
	96983520312774506326239578318016984801869478851843
	85861560789112949495459501737958331952853208805511
	12540698747158523863050715693290963295227443043557
	66896648950445244523161731856403098711121722383113
	62229893423380308135336276614282806444486645238749
	30358907296290491560440772390713810515859307960866
	70172427121883998797908792274921901699720888093776
	65727333001053367881220235421809751254540594752243
	52584907711670556013604839586446706324415722155397
	53697817977846174064955149290862569321978468622482
	83972241375657056057490261407972968652414535100474
	82166370484403199890008895243450658541227588666881
	16427171479924442928230863465674813919123162824586
	17866458359124566529476545682848912883142607690042
	24219022671055626321111109370544217506941658960408
	07198403850962455444362981230987879927244284909188
	84580156166097919133875499200524063689912560717606
	05886116467109405077541002256983155200055935729725
	71636269561882670428252483600823257530420752963450

	Answer: 40824
 */

namespace PROBLEM_008{
unsigned STEP = 5;

unsigned FindMax(const std::string& strNumber, unsigned startPos, unsigned endPos)
{
	unsigned unCurr = 1;

	for (unsigned i = startPos; i < startPos+STEP; i++)
		unCurr *= (int)(strNumber[i] - 48);

	unsigned unMax = unCurr;

	for (unsigned i = startPos+STEP; i < endPos; i++)
	{
		unCurr /= (int)(strNumber[i-STEP] - 48);
		unCurr *= (int)(strNumber[i] - 48);

		if ( unCurr > unMax )
			unMax = unCurr;
	}

	return unMax;
}
}

void Problem008()
{

	using namespace PROBLEM_008;

	std::string strNumber = "73167176531330624919225119674426574742355349194934"
						   "96983520312774506326239578318016984801869478851843"
						   "85861560789112949495459501737958331952853208805511"
						   "12540698747158523863050715693290963295227443043557"
						   "66896648950445244523161731856403098711121722383113"
						   "62229893423380308135336276614282806444486645238749"
							"30358907296290491560440772390713810515859307960866"
							"70172427121883998797908792274921901699720888093776"
							"65727333001053367881220235421809751254540594752243"
							"52584907711670556013604839586446706324415722155397"
							"53697817977846174064955149290862569321978468622482"
							"83972241375657056057490261407972968652414535100474"
							"82166370484403199890008895243450658541227588666881"
							"16427171479924442928230863465674813919123162824586"
							"17866458359124566529476545682848912883142607690042"
							"24219022671055626321111109370544217506941658960408"
							"07198403850962455444362981230987879927244284909188"
							"84580156166097919133875499200524063689912560717606"
							"05886116467109405077541002256983155200055935729725"
							"71636269561882670428252483600823257530420752963450";


	unsigned startPos = 0;
	unsigned endPos = 0;
	unsigned currMax = 0;
	unsigned maxProduct = 0;

	while ( startPos < strNumber.length() )
	{
		endPos = strNumber.find('0', startPos);

		if ( endPos == std::string::npos )
			endPos = strNumber.length();

		if ( startPos - endPos >= STEP )
		{
			currMax = FindMax( strNumber, startPos, endPos);

			if ( currMax > maxProduct )
			{
				maxProduct = currMax;
			}
		}

		startPos = endPos+1;
	}

	std::cout << maxProduct << std::endl;
	//////////////
}

#endif /* PROBLEM008_H_ */
