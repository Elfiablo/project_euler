/*
 * Problem012.h
 *
 * <<<Insert short description here>>>
 * 	
 * Author: Stanimir Stoykov
 * $Id: $
 *	
 * Copyright (c) 2004-2012 EGT Ltd.
 * All rights reserved
	
 * More information at: http://www.egt-bg.com
 */

#ifndef PROBLEM012_H_
#define PROBLEM012_H_

/*
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

	Let us list the factors of the first seven triangle numbers:

	 1: 1
	 3: 1,3
	 6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28
	We can see that 28 is the first triangle number to have over five divisors.

	What is the value of the first triangle number to have over five hundred divisors?

	Answer: 76576500
 */

#include <cstring>
#include <vector>
#include <limits>

namespace PROBLEM012{
std::vector<unsigned> vecPrimes;

void SievePrimes( const unsigned SIZE )
{
	bool primes[SIZE];
	memset(primes, 1, sizeof(primes));
	primes[0] = false;
	primes[1] = false;
	for ( unsigned i = 2; i < SIZE; i++ )
	{
		if ( !primes[i] )
			continue;

		for ( unsigned k = i+i; k < SIZE; k+=i) primes[k] = false;
	}

	for ( unsigned i = 0; i < SIZE; i++ )
	{
		if ( primes[i] )
			vecPrimes.push_back(i);
	}
}
int GetDivisorsNumber(unsigned number)
{
	int divisors = 1;
	int primeFactors = 0;
	unsigned currPrime = 0;

	while ( number != 1 )
	{
		if ( number % vecPrimes[currPrime] != 0 )
		{
			currPrime++;
			if ( currPrime >= vecPrimes.size() )
			{
				std::cout << "ERROR, unsuficient primes!\n";
				exit(1);
			}
			divisors *= (primeFactors+1);
			primeFactors = 0;
		}
		else
		{
			primeFactors++;
			number /= vecPrimes[currPrime];
		}
	}

	divisors *= (primeFactors+1);

	return divisors;
}
}

void Problem012()
{
	using namespace PROBLEM012;

	const int NUM_DIVISORS = 500;

	SievePrimes(1000000);

	return;

	unsigned triangleIdx = 1;
	unsigned triangleNum = 1;

	while ( GetDivisorsNumber( triangleNum ) <= NUM_DIVISORS )
	{
		triangleIdx++;
		triangleNum += triangleIdx;
	}

	std::cout << "N is " << triangleIdx << "; Triangle is " << triangleNum;
}

#endif /* PROBLEM012_H_ */
